plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.13.0'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

def versionObj = new Version(major: 2, minor: 6, revision: getBuildNum())

group 'me.duncte123'
version "${versionObj}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    //HTTP
    implementation 'com.squareup.okhttp3:okhttp:3.14.7'

    //Code safety
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
}

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath

    options.encoding = 'UTF-8'

    dependsOn sourcesForRelease
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
}

shadowJar {
    classifier = "withDependencies"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "${buildDir}/filteredSrc"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publish {
    dependsOn build

    onlyIf {
        System.getenv("JFROG_USERNAME") != null && System.getenv("JFROG_TOKEN") != null
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifactId 'reliqua'
            groupId project.group
            version project.version

            artifact javadocJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            name =  "jfrog"
            url = "https://duncte123.jfrog.io/artifactory/maven/"
            credentials {
                username = System.getenv("JFROG_USERNAME")
                password = System.getenv("JFROG_TOKEN")
            }
        }
    }
}

wrapper {
    gradleVersion = '7.0.2'
    distributionType = Wrapper.DistributionType.ALL
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    dependsOn test

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
    shadowJar.mustRunAfter sourcesJar
}

class Version {
    String major, minor, revision


    String toString() {
        "${major}.${minor}" + (revision == "0" ? "" : ".${revision}")
    }
}

static def getBuildNum () {
    return System.getenv('GITHUB_RUN_NUMBER') ?: 'dev'
}
